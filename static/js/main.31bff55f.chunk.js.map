{"version":3,"sources":["view-controller/DisplayNode/DisplayNode.tsx","model/utilities.ts","model/dijkstra.ts","model/bfs.ts","model/dfs.ts","model/a_star.ts","view-controller/PathfindingVisualizer.tsx","App.tsx","serviceWorker.js","index.js"],"names":["NodeComponent","this","props","col","row","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","extraClassName","id","className","Component","getAllNodes","grid","nodes","node","push","getAllNeighbors","getUnvisited","neighbors","length","filter","neighbor","isVisited","updateUnvisitedNeighbors","withDist","incrementValue","unvisitedNeighbors","distance","previousNode","sortNodesByDistance","unvisitedNodes","sort","nodeA","nodeB","dijkstra","startNode","finishNode","visitedNodesInOrder","closestNode","shift","undefined","Infinity","bfs","queue","v","dfs","stack","pop","aStar","start","end","Math","abs","Algorithms","PathfindingVisualizer","toggle","setState","prevState","dropdownOpen","state","mouseIsPressed","pathfinderName","Dijkstra","pathfinder","handleMouseDown","bind","handleMouseEnter","handleMouseUp","onDropdownItemClick","getInitialGrid","newGrid","getNewGridWithWallToggled","nodesInShortestPathOrder","i","setTimeout","animateShortestPath","displayNode","document","getElementById","currentNode","unshift","getNodesInShortestPathOrder","animatePathfinder","sender","dropDownValue","currentTarget","getAttribute","pathFinderFunc","DFS","BFS","A_Star","Button","color","onClick","visualizePathfinder","Dropdown","isOpen","DropdownToggle","caret","DropdownMenu","DropdownItem","dropdownvalue","map","rowIdx","key","nodeIdx","currentRow","createNode","slice","newNode","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.31bff55f.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './DisplayNode.css'\n\ntype Props = {\n  col: number\n  row: number\n  isFinish: boolean\n  isStart: boolean\n  isWall: boolean\n  onMouseDown: (row: number, col: number) => void\n  onMouseEnter: (row: number, col: number) => void\n  onMouseUp: () => void\n}\nexport default class NodeComponent extends Component<Props> {\n  render() {\n    const {\n      col,\n      row,\n      isFinish,\n      isStart,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n    } = this.props\n    const extraClassName = isFinish\n      ? 'node-finish'\n      : isStart\n        ? 'node-start'\n        : isWall\n          ? 'node-wall'\n          : ''\n\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`node ${extraClassName}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}></div>\n    )\n  }\n}\n","import { Grid, Node } from '../common'\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the pathfinder method above.\nexport function getNodesInShortestPathOrder(finishNode: Node): Node[] {\n  const nodesInShortestPathOrder = []\n  let currentNode: Node | null = finishNode\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode)\n    currentNode = currentNode.previousNode\n  }\n  return nodesInShortestPathOrder\n}\n\nexport function getAllNodes(grid: Grid): Node[] {\n  const nodes = []\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node)\n    }\n  }\n  return nodes\n}\n\n\nexport function getAllNeighbors(node: Node, grid: Grid, getUnvisited: boolean = false): Node[] {\n  const neighbors = []\n  const { col, row } = node\n  if (row > 0)\n    neighbors.push(grid[row - 1][col])\n  if (row < grid.length - 1)\n    neighbors.push(grid[row + 1][col])\n  if (col > 0)\n    neighbors.push(grid[row][col - 1])\n  if (col < grid[0].length - 1)\n    neighbors.push(grid[row][col + 1])\n\n  if (getUnvisited)\n    return neighbors.filter(neighbor => !neighbor.isVisited)\n  return neighbors\n}\n\nexport function updateUnvisitedNeighbors(node: Node, grid: Grid, withDist: boolean = false, incrementValue: number = 1) {\n  const unvisitedNeighbors = getAllNeighbors(node, grid, true)\n  for (const neighbor of unvisitedNeighbors) {\n    if (withDist)\n      neighbor.distance = node.distance + incrementValue\n    neighbor.previousNode = node\n  }\n}\n\nexport function sortNodesByDistance(unvisitedNodes: Node[]) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance)\n}\n","import { Grid, Node } from '../common'\nimport { getAllNodes, updateUnvisitedNeighbors, sortNodesByDistance } from './utilities'\n// Performs Dijkstra's algorithm returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\n\nexport function dijkstra(grid: Grid, startNode: Node, finishNode: Node): Node[] {\n  const visitedNodesInOrder = []\n  startNode.distance = 0\n  const unvisitedNodes = getAllNodes(grid)\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes)\n    const closestNode = unvisitedNodes.shift()\n    // If we encounter a wall, we skip it.\n    if (closestNode !== undefined) {\n      if (closestNode.isWall)\n        continue\n      // If the closest node is at a distance of infinity,\n      // we must be trapped and should therefore stop.\n      if (closestNode.distance === Infinity)\n        return visitedNodesInOrder\n\n      closestNode.isVisited = true\n      visitedNodesInOrder.push(closestNode)\n      if (closestNode === finishNode)\n        return visitedNodesInOrder\n      updateUnvisitedNeighbors(closestNode, grid, true)\n    }\n  }\n  return visitedNodesInOrder\n}\n\n","import { Grid, Node } from '../common'\nimport { getAllNeighbors, updateUnvisitedNeighbors } from './utilities'\n\nexport function bfs(grid: Grid, startNode: Node, finishNode: Node): Node[] {\n    const visitedNodesInOrder = []\n\n    const queue = []\n    startNode.isVisited = true\n    queue.push(startNode)\n    visitedNodesInOrder.push(startNode)\n\n    while (queue) {\n        const v = queue.shift()\n        // If we encounter a wall, we skip it.\n        if (v !== undefined) {\n\n            if (v === finishNode)\n                return visitedNodesInOrder\n\n            for (const neighbor of getAllNeighbors(v, grid)) {\n                if (neighbor.isWall)\n                    continue\n\n                if (!neighbor.isVisited) {\n                    neighbor.isVisited = true\n                    visitedNodesInOrder.push(neighbor)\n                    queue.push(neighbor)\n                    updateUnvisitedNeighbors(neighbor, grid)\n                }\n            }\n        }\n    }\n    return visitedNodesInOrder\n}","import { Grid, Node } from '../common'\nimport { getAllNeighbors, updateUnvisitedNeighbors } from './utilities'\n\nexport function dfs(grid: Grid, startNode: Node, finishNode: Node): Node[] {\n    const visitedNodesInOrder = []\n\n    const stack = []\n    stack.push(startNode)\n    while (stack) {\n        const v = stack.pop()\n        // If we encounter a wall, we skip it.\n        if (v !== undefined) {\n            if (v.isWall)\n                continue\n\n            if (v === finishNode)\n                return visitedNodesInOrder\n\n            if (!v.isVisited) {\n                v.isVisited = true\n                visitedNodesInOrder.push(v)\n\n                for (const neighbor of getAllNeighbors(v, grid)) {\n                    stack.push(neighbor)\n                }\n                updateUnvisitedNeighbors(v, grid)\n            }\n        }\n    }\n    return visitedNodesInOrder\n\n}","import { Grid, Node } from '../common'\nimport { getAllNodes, updateUnvisitedNeighbors, sortNodesByDistance } from './utilities'\n\nexport function aStar(grid: Grid, startNode: Node, finishNode: Node): Node[] {\n    const visitedNodesInOrder = []\n    startNode.distance = 0\n    const unvisitedNodes = getAllNodes(grid)\n    while (!!unvisitedNodes.length) {\n        sortNodesByDistance(unvisitedNodes)\n        const closestNode = unvisitedNodes.shift()\n        // If we encounter a wall, we skip it.\n        if (closestNode !== undefined) {\n            if (closestNode.isWall)\n                continue\n            // If the closest node is at a distance of infinity,\n            // we must be trapped and should therefore stop.\n            if (closestNode.distance === Infinity)\n                return visitedNodesInOrder\n\n            closestNode.isVisited = true\n            visitedNodesInOrder.push(closestNode)\n            if (closestNode === finishNode)\n                return visitedNodesInOrder\n            updateUnvisitedNeighbors(closestNode, grid, true, manhattanDistance(closestNode, finishNode))\n        }\n    }\n    return visitedNodesInOrder\n}\n\nfunction manhattanDistance(start: Node, end: Node) {\n    return Math.abs(end.col - start.col) + Math.abs(end.row - start.row)\n}","import React, { Component, MouseEvent } from 'react'\nimport DisplayNode from './DisplayNode/DisplayNode'\nimport { Button, Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap'\nimport { dijkstra } from '../model/dijkstra'\nimport { bfs } from '../model/bfs'\nimport { dfs } from '../model/dfs'\nimport { aStar } from '../model/a_star'\n\nimport { getNodesInShortestPathOrder } from '../model/utilities'\nimport { Grid, Node } from '../common'\nimport './PathfindingVisualizer.css'\n\nconst START_NODE_ROW = 10\nconst START_NODE_COL = 15\nconst FINISH_NODE_ROW = 10\nconst FINISH_NODE_COL = 35\n\ntype Props = {}\n\ntype State = {\n  grid: Grid\n  mouseIsPressed: boolean\n  dropdownOpen: boolean\n  pathfinderName: Algorithms\n  pathfinder: Pathfinder\n}\n\ntype Pathfinder = (grid: Grid, startNode: Node, finishNode: Node) => Node[]\n\nenum Algorithms {\n  Dijkstra = \"Dijkstra\",\n  DFS = \"Depth First Search\",\n  BFS = \"Breadth First Search\",\n  A_Star = \"A*\"\n}\nexport default class PathfindingVisualizer extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n      dropdownOpen: false,\n      pathfinderName: Algorithms.Dijkstra,\n      pathfinder: dijkstra\n    }\n    this.handleMouseDown = this.handleMouseDown.bind(this)\n    this.handleMouseEnter = this.handleMouseEnter.bind(this)\n    this.handleMouseUp = this.handleMouseUp.bind(this)\n    this.onDropdownItemClick = this.onDropdownItemClick.bind(this)\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid()\n    this.setState({ grid })\n  }\n\n  handleMouseDown(row: number, col: number) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col)\n    this.setState({ grid: newGrid, mouseIsPressed: true })\n  }\n\n  handleMouseEnter(row: number, col: number) {\n    if (!this.state.mouseIsPressed) return\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col)\n    this.setState({ grid: newGrid })\n  }\n\n  handleMouseUp() {\n    this.setState({ mouseIsPressed: false })\n  }\n\n\n  animatePathfinder(visitedNodesInOrder: Node[], nodesInShortestPathOrder: Node[]) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder)\n        }, 10 * i)\n        return\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i]\n        let displayNode = document.getElementById(`node-${node.row}-${node.col}`)\n\n        if (displayNode !== null)\n          displayNode.className =\n            'node node-visited'\n      }, 10 * i)\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder: Node[]) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i]\n        let displayNode = document.getElementById(`node-${node.row}-${node.col}`)\n\n        if (displayNode !== null) displayNode.className =\n          'node node-shortest-path'\n      }, 50 * i)\n    }\n  }\n\n  visualizePathfinder(pathfinder: Pathfinder) {\n    const { grid } = this.state\n    const startNode = grid[START_NODE_ROW][START_NODE_COL]\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL]\n    const visitedNodesInOrder = pathfinder(grid, startNode, finishNode)\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode)\n    this.animatePathfinder(visitedNodesInOrder, nodesInShortestPathOrder)\n  }\n\n  toggle = () => this.setState((prevState) => ({ dropdownOpen: !prevState.dropdownOpen }))\n\n  onDropdownItemClick(sender: MouseEvent<HTMLButtonElement>) {\n    if (sender !== null) {\n      let dropDownValue = sender.currentTarget.getAttribute(\"dropdownvalue\")\n      let pathFinderFunc = dijkstra\n      let pathfinderName = Algorithms.Dijkstra\n      switch (dropDownValue) {\n        case Algorithms.Dijkstra:\n          pathFinderFunc = dijkstra\n          pathfinderName = Algorithms.Dijkstra\n          break\n        case Algorithms.DFS:\n          pathFinderFunc = dfs\n          pathfinderName = Algorithms.DFS\n          break\n        case Algorithms.BFS:\n          pathFinderFunc = bfs\n          pathfinderName = Algorithms.BFS\n          break\n        case Algorithms.A_Star:\n          pathFinderFunc = aStar\n          pathfinderName = Algorithms.A_Star\n          break\n      }\n      const grid = getInitialGrid()\n      this.setState({ pathfinderName, pathfinder: pathFinderFunc, grid })\n    }\n  }\n  render() {\n    const { grid, dropdownOpen, pathfinderName, pathfinder } = this.state\n    return (\n      <div>\n        <Button color=\"primary\" onClick={() => this.visualizePathfinder(pathfinder)}>\n          Visualize {pathfinderName}\n        </Button>\n        <Dropdown isOpen={dropdownOpen} toggle={this.toggle}>\n          <DropdownToggle caret>\n            Algorithms\n          </DropdownToggle>\n          <DropdownMenu>\n            <DropdownItem onClick={this.onDropdownItemClick} dropdownvalue={Algorithms.Dijkstra}>Dijkstra</DropdownItem>\n            <DropdownItem onClick={this.onDropdownItemClick} dropdownvalue={Algorithms.BFS}>Breadth First Search</DropdownItem>\n            <DropdownItem onClick={this.onDropdownItemClick} dropdownvalue={Algorithms.DFS}>Depth First Search</DropdownItem>\n            <DropdownItem onClick={this.onDropdownItemClick} dropdownvalue={Algorithms.A_Star}>A*</DropdownItem>\n          </DropdownMenu>\n        </Dropdown>\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const { row, col, isFinish, isStart, isWall } = node\n                  return (\n                    <DisplayNode\n                      key={nodeIdx}\n                      row={row}\n                      col={col}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      onMouseDown={(row: number, col: number) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row: number, col: number) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                    />\n                  )\n                })}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n}\n\nconst getInitialGrid = (): Grid => {\n  const grid = []\n  for (let row = 0; row < 20; row++) {\n    const currentRow = []\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row))\n    }\n    grid.push(currentRow)\n  }\n  return grid\n}\n\nconst createNode = (col: number, row: number): Node => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n  }\n}\n\nconst getNewGridWithWallToggled = (grid: Grid, row: number, col: number): Grid => {\n  const newGrid = grid.slice()\n  const node = newGrid[row][col]\n  const newNode = {\n    ...node,\n    isWall: !node.isWall,\n  }\n  newGrid[row][col] = newNode\n  return newGrid\n}\n","import React, { Component } from 'react'\nimport './App.css'\nimport PathfindingVisualizer from './view-controller/PathfindingVisualizer'\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <PathfindingVisualizer></PathfindingVisualizer>\n      </div>\n    )\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}