{"version":3,"sources":["PathfindingVisualizer/Node/Node.tsx","algorithms/dijkstra.ts","PathfindingVisualizer/PathfindingVisualizer.tsx","App.tsx","serviceWorker.js","index.js"],"names":["Node","this","props","col","row","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","undefined","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","PathfindingVisualizer","state","mouseIsPressed","getInitialGrid","setState","newGrid","getNewGridWithWallToggled","nodesInShortestPathOrder","i","setTimeout","animateShortestPath","displayNode","document","getElementById","currentNode","unshift","getNodesInShortestPathOrder","animateDijkstra","onClick","visualizeDijkstra","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","slice","newNode","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sWAaqBA,G,kKACnB,WACE,MASIC,KAAKC,MARPC,EADF,EACEA,IACAC,EAFF,EAEEA,IACAC,EAHF,EAGEA,SACAC,EAJF,EAIEA,QACAC,EALF,EAKEA,OACAC,EANF,EAMEA,YACAC,EAPF,EAOEA,aACAC,EARF,EAQEA,UAEIC,EAAiBN,EACnB,cACAC,EACE,aACAC,EACE,YACA,GAER,OACE,yBACEK,GAAE,eAAUR,EAAV,YAAiBD,GACnBU,UAAS,eAAUF,GACnBH,YAAa,kBAAMA,EAAYJ,EAAKD,IACpCM,aAAc,kBAAMA,EAAaL,EAAKD,IACtCO,UAAW,kBAAMA,W,GA1BSI,c,OCN3B,SAASC,EAASC,EAAYC,EAAqBC,GACxD,IAAMC,EAAsB,GAC5BF,EAAUG,SAAW,EAErB,IADA,IAAMC,EAyCR,SAAqBL,GACnB,IAD2C,EACrCM,EAAQ,GAD6B,cAEzBN,GAFyB,IAE3C,2BAAwB,CAAC,IAAD,EAAbZ,EAAa,sBACHA,GADG,IACtB,2BAAwB,CAAC,IAAdmB,EAAa,QACtBD,EAAME,KAAKD,IAFS,gCAFmB,8BAO3C,OAAOD,EAhDgBG,CAAYT,GAC1BK,EAAeK,QAAQ,CAC9BC,EAAoBN,GACpB,IAAMO,EAAcP,EAAeQ,QAEnC,QAAoBC,IAAhBF,EAA2B,CAC7B,GAAIA,EAAYrB,OAAQ,SAGxB,GAAIqB,EAAYR,WAAaW,IAAU,OAAOZ,EAG9C,GAFAS,EAAYI,WAAY,EACxBb,EAAoBK,KAAKI,GACrBA,IAAgBV,EAAY,OAAOC,EACvCc,EAAyBL,EAAaZ,IAG1C,OAAOG,EAGT,SAASQ,EAAoBN,GAC3BA,EAAea,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMf,SAAWgB,EAAMhB,YAG/D,SAASa,EAAyBV,EAAgBP,GAChD,IAD4D,EACtDqB,EAOR,SAA+Bd,EAAgBP,GAC7C,IAAMsB,EAAY,GACVnC,EAAaoB,EAAbpB,IAAKC,EAAQmB,EAARnB,IACTA,EAAM,GAAGkC,EAAUd,KAAKR,EAAKZ,EAAM,GAAGD,IACtCC,EAAMY,EAAKU,OAAS,GAAGY,EAAUd,KAAKR,EAAKZ,EAAM,GAAGD,IACpDA,EAAM,GAAGmC,EAAUd,KAAKR,EAAKZ,GAAKD,EAAM,IACxCA,EAAMa,EAAK,GAAGU,OAAS,GAAGY,EAAUd,KAAKR,EAAKZ,GAAKD,EAAM,IAC7D,OAAOmC,EAAUC,QAAO,SAAAC,GAAQ,OAAKA,EAASR,aAdnBS,CAAsBlB,EAAMP,GADK,cAErCqB,GAFqC,IAE5D,2BAA2C,CAAC,IAAjCG,EAAgC,QACzCA,EAASpB,SAAWG,EAAKH,SAAW,EACpCoB,EAASE,aAAenB,GAJkC,+B,UCfzCoB,E,kDACnB,WAAYzC,GAAe,IAAD,8BACxB,cAAMA,IACD0C,MAAQ,CACX5B,KAAM,GACN6B,gBAAgB,GAJM,E,qDAQ1B,WACE,IAAM7B,EAAO8B,IACb7C,KAAK8C,SAAS,CAAE/B,W,6BAGlB,SAAgBZ,EAAaD,GAC3B,IAAM6C,EAAUC,EAA0BhD,KAAK2C,MAAM5B,KAAMZ,EAAKD,GAChEF,KAAK8C,SAAS,CAAE/B,KAAMgC,EAASH,gBAAgB,M,8BAGjD,SAAiBzC,EAAaD,GAC5B,GAAKF,KAAK2C,MAAMC,eAAhB,CACA,IAAMG,EAAUC,EAA0BhD,KAAK2C,MAAM5B,KAAMZ,EAAKD,GAChEF,KAAK8C,SAAS,CAAE/B,KAAMgC,O,2BAGxB,WACE/C,KAAK8C,SAAS,CAAEF,gBAAgB,M,6BAGlC,SAAgB1B,EAAiC+B,GAC/C,IADsF,IAAD,kBAC5EC,GACP,GAAIA,IAAMhC,EAAoBO,OAI5B,OAHA0B,YAAW,WACT,EAAKC,oBAAoBH,KACxB,GAAKC,GACF,CAAN,UAEFC,YAAW,WACT,IAAM7B,EAAOJ,EAAoBgC,GAC7BG,EAAcC,SAASC,eAAT,eAAgCjC,EAAKnB,IAArC,YAA4CmB,EAAKpB,MAE/C,OAAhBmD,IACFA,EAAYzC,UACV,uBACH,GAAKsC,IAdDA,EAAI,EAAGA,GAAKhC,EAAoBO,OAAQyB,IAAK,CAAC,IAAD,IAA7CA,GAA6C,qC,iCAkBxD,SAAoBD,GAClB,IADyD,IAAD,WAC/CC,GACPC,YAAW,WACT,IAAM7B,EAAO2B,EAAyBC,GAClCG,EAAcC,SAASC,eAAT,eAAgCjC,EAAKnB,IAArC,YAA4CmB,EAAKpB,MAE/C,OAAhBmD,IAAsBA,EAAYzC,UACpC,6BACD,GAAKsC,IAPDA,EAAI,EAAGA,EAAID,EAAyBxB,OAAQyB,IAAM,EAAlDA,K,+BAWX,WACE,IAAQnC,EAASf,KAAK2C,MAAd5B,KACFC,EAAYD,EA1EC,IACA,IA0EbE,EAAaF,EAzEC,IACA,IAyEdG,EAAsBJ,EAASC,EAAMC,EAAWC,GAChDgC,EDpBH,SAAqChC,GAG1C,IAFA,IAAMgC,EAA2B,GAC7BO,EAA+BvC,EACZ,OAAhBuC,GACLP,EAAyBQ,QAAQD,GACjCA,EAAcA,EAAYf,aAE5B,OAAOQ,ECa4BS,CAA4BzC,GAC7DjB,KAAK2D,gBAAgBzC,EAAqB+B,K,oBAG5C,WAAU,IAAD,OACClC,EAASf,KAAK2C,MAAd5B,KAER,OACE,oCACE,4BAAQ6C,QAAS,kBAAM,EAAKC,sBAA5B,kCAGA,yBAAKjD,UAAU,QACZG,EAAK+C,KAAI,SAAC3D,EAAK4D,GACd,OACE,yBAAKC,IAAKD,GACP5D,EAAI2D,KAAI,SAACxC,EAAM2C,GACd,IAAQ9D,EAAwCmB,EAAxCnB,IAAKD,EAAmCoB,EAAnCpB,IAAKE,EAA8BkB,EAA9BlB,SAAUC,EAAoBiB,EAApBjB,QAASC,EAAWgB,EAAXhB,OACrC,OACE,kBAAC,EAAD,CACE0D,IAAKC,EACL/D,IAAKA,EACLE,SAAUA,EACVC,QAASA,EACTC,OAAQA,EACRC,YAAa,SAACJ,EAAaD,GAAd,OAA8B,EAAKgE,gBAAgB/D,EAAKD,IACrEM,aAAc,SAACL,EAAaD,GAAd,OACZ,EAAKiE,iBAAiBhE,EAAKD,IAE7BO,UAAW,kBAAM,EAAK2D,iBACtBjE,IAAKA,iB,GA/FwBU,aA2G7CgC,EAAiB,WAErB,IADA,IAAM9B,EAAO,GACJZ,EAAM,EAAGA,EAAM,GAAIA,IAAO,CAEjC,IADA,IAAMkE,EAAa,GACVnE,EAAM,EAAGA,EAAM,GAAIA,IAC1BmE,EAAW9C,KAAK+C,EAAWpE,EAAKC,IAElCY,EAAKQ,KAAK8C,GAEZ,OAAOtD,GAGHuD,EAAa,SAACpE,EAAaC,GAC/B,MAAO,CACLD,MACAC,MACAE,QAvImB,KAuIVF,GAtIU,KAsIgBD,EACnCE,SAtIoB,KAsIVD,GArIU,KAqIiBD,EACrCiB,SAAUW,IACVC,WAAW,EACXzB,QAAQ,EACRmC,aAAc,OAIZO,EAA4B,SAACjC,EAAYZ,EAAaD,GAC1D,IAAM6C,EAAUhC,EAAKwD,QACfjD,EAAOyB,EAAQ5C,GAAKD,GACpBsE,EAAO,2BACRlD,GADQ,IAEXhB,QAASgB,EAAKhB,SAGhB,OADAyC,EAAQ5C,GAAKD,GAAOsE,EACbzB,GC1JY0B,E,4JACnB,WACE,OACE,yBAAK7D,UAAU,OACb,kBAAC,EAAD,W,GAJyBC,aCQb6D,QACW,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZJC,IAASC,OAAO,kBAAC,EAAD,MAAS1B,SAASC,eAAe,SD2H3C,kBAAmB0B,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.16907203.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Node.css';\n\ntype Props = {\n  col: number\n  row: number\n  isFinish: boolean\n  isStart: boolean\n  isWall: boolean\n  onMouseDown: (row: number, col: number) => void\n  onMouseEnter: (row: number, col: number) => void\n  onMouseUp: () => void\n}\nexport default class Node extends Component<Props> {\n  render() {\n    const {\n      col,\n      row,\n      isFinish,\n      isStart,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n    } = this.props;\n    const extraClassName = isFinish\n      ? 'node-finish'\n      : isStart\n        ? 'node-start'\n        : isWall\n          ? 'node-wall'\n          : '';\n\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`node ${extraClassName}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}></div>\n    );\n  }\n}\n","import { Grid, NodeInfo } from '../common'\n\n// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\n\nexport function dijkstra(grid: Grid, startNode: NodeInfo, finishNode: NodeInfo): NodeInfo[] {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    // If we encounter a wall, we skip it.\n    if (closestNode !== undefined) {\n      if (closestNode.isWall) continue;\n      // If the closest node is at a distance of infinity,\n      // we must be trapped and should therefore stop.\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\n      closestNode.isVisited = true;\n      visitedNodesInOrder.push(closestNode);\n      if (closestNode === finishNode) return visitedNodesInOrder;\n      updateUnvisitedNeighbors(closestNode, grid);\n    }\n  }\n  return visitedNodesInOrder\n}\n\nfunction sortNodesByDistance(unvisitedNodes: NodeInfo[]) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node: NodeInfo, grid: Grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node: NodeInfo, grid: Grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid: Grid): NodeInfo[] {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode: NodeInfo): NodeInfo[] {\n  const nodesInShortestPathOrder = [];\n  let currentNode: NodeInfo | null = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","import React, { Component } from 'react';\nimport Node from './Node/Node';\nimport { dijkstra, getNodesInShortestPathOrder } from '../algorithms/dijkstra';\nimport { Grid, NodeInfo } from '../common'\nimport './PathfindingVisualizer.css';\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\ntype Props = {}\n\ntype State = {\n  grid: Grid\n  mouseIsPressed: boolean\n}\n\nexport default class PathfindingVisualizer extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({ grid });\n  }\n\n  handleMouseDown(row: number, col: number) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({ grid: newGrid, mouseIsPressed: true });\n  }\n\n  handleMouseEnter(row: number, col: number) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({ grid: newGrid });\n  }\n\n  handleMouseUp() {\n    this.setState({ mouseIsPressed: false });\n  }\n\n  animateDijkstra(visitedNodesInOrder: NodeInfo[], nodesInShortestPathOrder: NodeInfo[]) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        let displayNode = document.getElementById(`node-${node.row}-${node.col}`)\n\n        if (displayNode !== null)\n          displayNode.className =\n            'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder: NodeInfo[]) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        let displayNode = document.getElementById(`node-${node.row}-${node.col}`)\n\n        if (displayNode !== null) displayNode.className =\n          'node node-shortest-path';\n      }, 50 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    const { grid } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  render() {\n    const { grid } = this.state;\n\n    return (\n      <>\n        <button onClick={() => this.visualizeDijkstra()}>\n          Visualize Dijkstra's Algorithm\n        </button>\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const { row, col, isFinish, isStart, isWall } = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      onMouseDown={(row: number, col: number) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row: number, col: number) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      row={row}></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\nconst getInitialGrid = (): Grid => {\n  const grid = [];\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createNode = (col: number, row: number): NodeInfo => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n  };\n};\n\nconst getNewGridWithWallToggled = (grid: Grid, row: number, col: number): Grid => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n","import React, { Component } from 'react';\nimport './App.css';\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <PathfindingVisualizer></PathfindingVisualizer>\n      </div>\n    );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}